// src/context/UsersContext.ts
import { ReactNode, useContext, useEffect, useMemo, useState } from "react";
import { createContext } from "react";
import { ITab, IUser } from "../model";
import UserService from "../hooks/UserService";
import { userData } from "../data";

interface UsersProviderProps {
  children: ReactNode;
}

interface UsersContextProps {
  filteredUsers: IUser[];
  setSearchKey: (value: string) => void;
  searchKey: string;
  setTab: (value: string) => void;
  tab: string;
  toggleRole: (role: string) => void;
  toggledRoles: string[];
  roleValues: string[];
  resetAllFilters: () => void;
  isFilterOn: boolean;
  statusTabs: Record<string,number>;
}

const UsersContext = createContext<UsersContextProps | undefined>(undefined);

export const UsersProvider = ({ children }: UsersProviderProps) => {
  const [searchKey, setSearchKey] = useState('');
  const [users, setUsers] = useState<IUser[]>([]);
  const [tab, setTab] = useState('all');
  const [roleValues, setRoleValues] = useState<string[]>([]);
  const [toggledRoles, setToggledRoles] = useState<string[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      setError(null);
      try {
        const data = await UserService.fetchUsers();
        setUsers(data);
        setRoleValues(Array.from(new Set(data.map((user) => user.role))));
      } catch (err) {
        setError("Failed to fetch users");
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const toggleRole = (role: string) => {
    setToggledRoles((prev) => {
      if (prev.includes(role)) {
        return prev.filter((r) => r !== role); // Remove role if it already exists
      } else {
        return [...prev, role]; // Add role if it doesn't exist
      }
    });
  };

  const filteredUsers = useMemo(() => {
    return users.filter((user) => {
      const matchesStatus = tab === 'all' || user.status.toLowerCase() === tab;
      const matchesSearchKey = user.name.toLowerCase().includes(searchKey);
      const matchesRoles = toggledRoles.length === 0 || toggledRoles.includes(user.role);
      return matchesStatus && matchesSearchKey && matchesRoles;
    });
  }, [searchKey, users, tab, toggledRoles]);

  const statusTabs = useMemo(()=>{
    const result:Record<string,number> = { "All": userData.length,  "Active": 0, "Banned": 0, "Pending": 0, "Rejected" : 0};
    for(let i = 0; i < userData.length; i++){
        let status = userData[i].status; 
        const currValue = result[status];
        result[status] = currValue + 1;
        
    }
    return result;
  }, [users]);

  const resetAllFilters = () => {
    setTab('all');
    setSearchKey('');
    setToggledRoles([]);
  }

  const isFilterOn = tab !== 'all' || toggledRoles.length > 0 || searchKey.trim().length > 0;

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  return (
    <UsersContext.Provider value={{
      setSearchKey, filteredUsers, tab, setTab,
      toggledRoles, roleValues, toggleRole, searchKey, resetAllFilters, isFilterOn, statusTabs
    }}>
      {children}
    </UsersContext.Provider>
  );
}

export const useUsers = (): UsersContextProps => {
  const context = useContext(UsersContext);
  if (!context) {
    throw new Error('useUsers must be used within a UsersProvider');
  }
  return context;
}
